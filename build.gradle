buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.0.0'
    }
}

//gradle plugins
apply plugin: 'maven'

//default
defaultTasks 'getjenkins', 'getplugins'

apply from: 'variables.gradle'

//RPM or DEB package version
//version should be the jenkins.war version appended by .1 and increments .1
//every time there's non-jenkins.war version changes to the package.
//if upgrading jenkins.war version then it should be reset to .1.
version = '2.46.3.1'
description = "Built from jenkins-bootstrap-jervis @ ${tokens['COMMIT']}"

task cleanJenkins(type: Delete) {
    doFirst {
        //stop jenkins just in case it's running
        def stdout = new StringBuilder()
        def stderr = new StringBuilder()
        def process = ["${bootstrapHome}/scripts/provision_jenkins.sh", 'purge'].execute()
        process.waitForProcessOutput(stdout, stderr)
        println stdout.toString()
        println stderr.toString()
    }
    delete '.gradle'
    delete 'plugins'
}

clean.dependsOn cleanJenkins

configurations {
    getplugins {
        description = 'Download Jenkins plugins .jpi files.'
        transitive = false
    }
    getjenkins {
        description = 'Download Jenkins WAR file.'
        transitive = false
    }
}
repositories {
    maven {
        name 'jenkins'
        delegate.url('https://repo.jenkins-ci.org/public/')
    }
}
dependencies {
    //get Jenkins
    getjenkins "org.jenkins-ci.main:jenkins-war:2.46.3@war"

    //get plugins
    getplugins 'com.coravy.hudson.plugins.github:github:1.20.0@hpi'
    getplugins 'org.jenkins-ci.main:maven-plugin:2.16@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-scm-step:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins.workflow:workflow-step-api:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins:ant:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:antisamy-markup-formatter:1.1@hpi'
    getplugins 'org.jenkins-ci.plugins:bouncycastle-api:2.16.1@hpi'
    getplugins 'org.jenkins-ci.plugins:credentials:2.1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:cvs:2.11@hpi'
    getplugins 'org.jenkins-ci.plugins:display-url-api:2.0@hpi'
    getplugins 'org.jenkins-ci.plugins:external-monitor-job:1.4@hpi'
    getplugins 'org.jenkins-ci.plugins:ghprb:1.33.0@hpi'
    getplugins 'org.jenkins-ci.plugins:git-client:1.19.7@hpi'
    getplugins 'org.jenkins-ci.plugins:git:2.5.2@hpi'
    getplugins 'org.jenkins-ci.plugins:github-api:1.76@hpi'
    getplugins 'org.jenkins-ci.plugins:greenballs:1.15@hpi'
    getplugins 'org.jenkins-ci.plugins:javadoc:1.1@hpi'
    getplugins 'org.jenkins-ci.plugins:junit:1.15@hpi'
    getplugins 'org.jenkins-ci.plugins:ldap:1.11@hpi'
    getplugins 'org.jenkins-ci.plugins:mailer:1.16@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-auth:1.1@hpi'
    getplugins 'org.jenkins-ci.plugins:matrix-project:1.7.1@hpi'
    getplugins 'org.jenkins-ci.plugins:pam-auth:1.1@hpi'
    getplugins 'org.jenkins-ci.plugins:parameterized-trigger:2.29@hpi'
    getplugins 'org.jenkins-ci.plugins:plain-credentials:1.1@hpi'
    getplugins 'org.jenkins-ci.plugins:scm-api:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:script-security:1.13@hpi'
    getplugins 'org.jenkins-ci.plugins:slack:2.2@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-agent:1.8@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-credentials:1.12@hpi'
    getplugins 'org.jenkins-ci.plugins:ssh-slaves:1.9@hpi'
    getplugins 'org.jenkins-ci.plugins:structs:1.2@hpi'
    getplugins 'org.jenkins-ci.plugins:subversion:1.54@hpi'
    getplugins 'org.jenkins-ci.plugins:token-macro:1.12.1@hpi'
    getplugins 'org.jenkins-ci.plugins:translation:1.10@hpi'
    getplugins 'org.jenkins-ci.plugins:windows-slaves:1.0@hpi'
}
//download and copy specific versions of plugins
task getplugins(type: Copy) {
    into "${pluginsDest}/plugins"
    from configurations.getplugins
    include '*.hpi'
    rename '(.*)-[.0-9]+.hpi$', '$1.jpi'
}

//download and copy a specific version of Jenkins
task getjenkins(type: Copy) {
    //println configurations.getjenkins
    into jenkinsDest
    from configurations.getjenkins
    include '*.war'
    rename '.*', 'jenkins.war'
}

//http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
//generate gradlew with: gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '4.0.2'
}

apply from: 'packaging/packaging.gradle'
