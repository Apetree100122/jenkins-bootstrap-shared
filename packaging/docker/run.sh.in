#!/bin/bash
#Created by Sam Gleske
#Tue Jan 30 23:53:18 PST 2018
#Docker runner for Jenkins

set -e

if [ -z "${JAVA_HOME}" ]; then
  echo "Error: JAVA_HOME not set."
  exit 1
fi
export PATH="${JAVA_HOME}/bin:${PATH}"

JENKINS_WAR="~~WAR~~"

# container configurable variables
JENKINS_HOME="${JENKINS_HOME:-~~HOME~~}"
[ -n "${JENKINS_JAVA_OPTIONS}" ] || JENKINS_JAVA_OPTIONS="~~JENKINS_JAVA_OPTIONS~~"
JENKINS_PORT="${JENKINS_PORT:-@@HTTP_PORT@@}"
JENKINS_KEYSTORE="${JENKINS_KEYSTORE:-~~HTTPS_KEYSTORE~~}"
JENKINS_DEBUG_LEVEL="${JENKINS_DEBUG_LEVEL:-5}"
JENKINS_HANDLER_MAX="${JENKINS_HANDLER_MAX:-~~HTTP_MAX_WORKER_THREADS~~}"
JENKINS_HANDLER_IDLE="${JENKINS_HANDLER_IDLE:-~~HTTP_MAX_IDLE_THREADS~~}"
[ -n "${JENKINS_ARGS}" ] || JENKINS_ARGS="-~~ADDITIONAL_JENKINS_ARGS~~"

if [ "${JENKINS_KEYSTORE}" ]; then
  #smart HTTPS defaults for Jenkins
  JENKINS_HTTPS_PORT="${JENKINS_HTTPS_PORT:-8443}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE="${JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE:-/dev/null}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD="${JENKINS_HTTPS_KEYSTORE_PASSWORD:-$(< "${JENKINS_HTTPS_KEYSTORE_PASSWORD_FILE}")}"
  JENKINS_HTTPS_KEYSTORE_PASSWORD="${JENKINS_HTTPS_KEYSTORE_PASSWORD:-changeit}"
  JENKINS_HTTPS_LISTEN_ADDRESS="0.0.0.0"
fi

JAVA_CMD=( java ${JAVA_OPTS} ${JENKINS_JAVA_OPTIONS} -DJENKINS_HOME="${JENKINS_HOME}" -jar "${JENKINS_WAR}" )
ARGS=( "--webroot=/var/cache/@@ARTIFACTNAME@@/war" "--pluginroot=/var/cache/@@ARTIFACTNAME@@/plugins" )
[ -z "${JENKINS_PORT}" ] || ARGS+=( "--httpPort=${JENKINS_PORT}" )
[ -z "${JENKINS_LISTEN_ADDRESS}" ] || ARGS+=( "--httpListenAddress=${JENKINS_LISTEN_ADDRESS}" )
[ -z "${JENKINS_HTTPS_PORT}" ] || ARGS+=( "--httpsPort=${JENKINS_HTTPS_PORT}" )
[ -z "${JENKINS_HTTPS_KEYSTORE}" ] || ARGS+=( "--httpsKeyStore=${JENKINS_HTTPS_KEYSTORE}" )
[ -z "${JENKINS_HTTPS_KEYSTORE_PASSWORD}" ] || ARGS+=( "--httpsKeyStorePassword=${JENKINS_HTTPS_KEYSTORE_PASSWORD}" )
[ -z "${JENKINS_HTTPS_LISTEN_ADDRESS}" ] || ARGS+=( "--httpsListenAddress=${JENKINS_HTTPS_LISTEN_ADDRESS}" )
[ -z "${JENKINS_DEBUG_LEVEL}" ] || ARGS+=( "--debug=${JENKINS_DEBUG_LEVEL}" )
[ -z "${JENKINS_HANDLER_MAX}" ] || ARGS+=( "--handlerCountMax=${JENKINS_HANDLER_MAX}" )
[ -z "${JENKINS_HANDLER_IDLE}" ] || ARGS+=( "--handlerCountMaxIdle=${JENKINS_HANDLER_IDLE}" )
[ -z "${JENKINS_ARGS}" ] || ARGS+=( ${JENKINS_ARGS} )

#synchronize plugins
if [ -d "@@PREFIX@@/lib/@@ARTIFACTNAME@@/plugins/" ]; then
  echo "Overwriting Jenkins plugins."
  mkdir -p "${JENKINS_HOME}/plugins"
  rsync -a --delete-after "@@PREFIX@@/lib/@@ARTIFACTNAME@@/plugins/" "${JENKINS_HOME}/plugins/"
  for plugin in "${JENKINS_HOME}"/plugins/*.jpi;do
    #pin plugin versions
    #https://wiki.jenkins-ci.org/display/JENKINS/Pinned+Plugins
    touch "${plugin}.pinned"
  done
fi
#synchronize scripts
if [ -d "@@PREFIX@@/lib/@@ARTIFACTNAME@@/scripts/init.groovy.d/" ]; then
  echo "Overwriting Jenkins init scripts."
  mkdir -p "${JENKINS_HOME}/init.groovy.d"
  rsync -a --delete-after "@@PREFIX@@/lib/@@ARTIFACTNAME@@/scripts/init.groovy.d/" "${JENKINS_HOME}/init.groovy.d/"
fi

echo "Starting @@PRODUCTNAME@@"
#launch in foreground for docker to collect logs on stdout
exec "${JAVA_CMD[@]}" "${ARGS[@]}"
